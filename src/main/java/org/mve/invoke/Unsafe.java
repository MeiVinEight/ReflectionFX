package org.mve.invoke;

import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.security.ProtectionDomain;

public abstract class Unsafe
{
	public abstract Object invoke(Method method, Object obj, Object[] args);
	public abstract Object construct(Constructor<?> c, Object[] args);
	public abstract byte getByte(long offset);
	public abstract byte getByte(Object obj, long offset);
	public abstract void putByte(long offset, byte b);
	public abstract void putByte(Object obj, long offset, byte b);
	public abstract short getShort(long offset);
	public abstract short getShort(Object obj, long offset);
	public abstract void putShort(long offset, short s);
	public abstract void putShort(Object obj, long offset, short s);
	public abstract int getInt(long offset);
	public abstract int getInt(Object obj, long offset);
	public abstract void putInt(long offset, int i);
	public abstract void putInt(Object obj, long offset, int i);
	public abstract long getLong(long offset);
	public abstract long getLong(Object obj, long offset);
	public abstract void putLong(long offset, long l);
	public abstract void putLong(Object obj, long offset, long l);
	public abstract float getFloat(long offset);
	public abstract float getFloat(Object obj, long offset);
	public abstract void putFloat(long offset, float f);
	public abstract void putFloat(Object obj, long offset, float f);
	public abstract double getDouble(long offset);
	public abstract double getDouble(Object obj, long offset);
	public abstract void putDouble(long offset, double d);
	public abstract void putDouble(Object obj, long offset, double d);
	public abstract boolean getBoolean(long offset);
	public abstract boolean getBoolean(Object obj, long offset);
	public abstract void putBoolean(long offset, boolean b);
	public abstract void putBoolean(Object obj, long offset, boolean b);
	public abstract char getChar(long offset);
	public abstract char getChar(Object obj, long offset);
	public abstract void putChar(long offset, char c);
	public abstract void putChar(Object obj, long offset, char c);
	public abstract Object getObject(Object obj, long offset);
	public abstract void putObject(Object obj, long offset, Object value);
	public abstract long getAddress(long address);
	public abstract void putAddress(long address, long value);
	public abstract long allocateMemory(long length);
	public abstract long reallocateMemory(long address, long length);
	public abstract void setMemory(Object o, long offset, long bytes, byte value);
	public abstract void setMemory(long address, long bytes, byte value);
	public abstract void copyMemory(Object src, long secOff, Object dest, long destOff, long length);
	public abstract void copyMemory(long src, long dest, long length);
	public abstract void freeMemory(long address);
	public abstract long staticFieldOffset(Field f);
	public abstract long objectFieldOffset(Field f);
	public abstract Object staticFieldBase(Field f);
	public abstract boolean shouldBeInitialized(Class<?> c);
	public abstract void ensureClassInitialized(Class<?> c);
	public abstract int arrayBaseOffset(Class<?> c);
	public abstract int arrayIndexScale(Class<?> c);
	public abstract int addressSize();
	public abstract int pageSize();
	public abstract Class<?> defineClass(String name, byte[] code, int offset, int length, ClassLoader loader, ProtectionDomain protectionDomain);
	public abstract Class<?> defineAnonymousClass(Class<?> hostClass, byte[] data, Object[] cpPatches);
	public abstract Object allocateInstance(Class<?> c);
	public abstract void throwException(Throwable t);
	public abstract boolean compareAndSwapInt(Object obj, long offset, int expected, int value);
	public abstract boolean compareAndSwapLong(Object obj, long offset, long expected, long value);
	public abstract boolean compareAndSwapObject(Object obj, long offset, Object expected, Object value);
	public abstract void unpark(Object thread);
	public abstract void park(boolean isAbsolute, long time);
	public abstract void loadFence();
	public abstract void storeFence();
	public abstract void fullFence();
}
